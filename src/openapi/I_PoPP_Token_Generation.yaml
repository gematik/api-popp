openapi: 3.1.0
info:
  title: PoPP Token Generation API healthcare practitioners software
  version: 1.0.0
  description: |
    This interface provides access to PoPP Token Generation API to be used by 
    healthcare practitioners software systems (Prim√§rsysteme). It defines the 
    request, responses and other messages exchanged between the client and the 
    server to generate a PoPP token. 

paths:
  /popp/practitioner/api/v1/token-generation-ehc:
    summary: WebSocket endpoint for PoPP Token Generation
    description: |
      This endpoint allows the client to establish a WebSocket connection to the
      server and transmit messages to generate a PoPP token using the 
      eHealth-Card.
    get:
      summary: |
        Establish WebSocket Connection.
         
        Note: The actual connection is established using the WebSocket protocol 
        (wss://) and not via regular HTTP GET.
      operationId: connect
      responses:
        '101':
          description: Switching protocols to WebSocket
        '400':
          description: Bad request - unable to establish connection
      security:
        - oauth2Profiles: [ "token:generate" ]

  /popp/practitioner/api/v1/token-generation-tan:
    post:
      operationId: getPoPPToken
      summary: Exchange a TAN for a PoPP Token.
      description: | 
        This endpoint allows the client to generate a PoPP token using a TAN.
      requestBody:
        required: true
        content:
          application/json:
           schema:
            $ref: '#/components/schemas/TokenTanRequest'

      responses:
        '200':
          $ref: '#/components/responses/TokenResponse200'
        '400':
          $ref: '#/components/responses/Error400BadRequest'
        '403':
          $ref: '#/components/responses/Error403Forbidden'
        '404':
          $ref: '#/components/responses/Error404NotFound'
        '500':
          $ref: '#/components/responses/Error500InternalError'

      security:
        - oauth2Profiles: [ "token:generate" ]

components:
  schemas:
    StartMessage:
      type: object
      title: "Start proof process using electronic health card (eHC)"
      description: Sent by a client to start the eHC proof process.
      properties:
        type:
          type: string
          const: "Start"
          description: "The constant type identifier for Start."
        version:
          type: string
          const: "1.0.0"
          description: |
            The version of the eHC proof process to use, chosen by the client. 
            Server is expected to support this version.
            - version="1.0.0": actual value of "version"
        cardConnectionType:
          type: string
          enum:
            - "contact-standard"
            - "contact-connector"
            - "contactless-standard"
            - "contactless-connector"
          description: |
            The type of smartcard connection the client claims to use:
            
            * "contact-standard": contact based smartcard communication using
            ISO/IEC 7816-3 protocol T=1,
            no connector is not involved in the communication with eHC
            
            * "contact-connector": contact based smartcard communication using
            ISO/IEC 7816-3 protocol T=1,
            a connector communicates with the eHC via an eHCT
            
            * "contactless-standard": contactless smartcard communication using
            a protocol from ISO/IEC 14443 series,
            no connector is not involved in the communication with eHC
            
            * "contactless-connector": contactless smartcard communication using
            a protocol from ISO/IEC 14443 series,
            a connector communicates with the eHC via an eHCT
        clientSessionId:
          type: string
          description: |
            A unique identifier for the client session.
            If "cardConnectionType" is "...-connector" then this value is
            generated by a connector, otherwise this value is generated by a
            client.
            A 128-bit octet string identifying a clients's session consisting of
            one or more "StandardScenarioMessage". It is recommended to use
            UUID according to RFC 4122.
            The PoPP-Service will use this value as
            "StandardScenarioMessage.clientSessionId".
      examples:
        - type: "Start"
          version: "1.0.0"
          cardConnectionType: "contact-standard"
          clientSessionId: "123e4567-e89b-12d3-a456-426614174000"
      required:
        - type
        - version
        - cardConnectionType
        - clientSessionId

    StandardScenarioMessage:
      type: object
      title: "Bunch of commands to be executed by an eHC"
      description: |
        Sent by the server to the client to execute zero, one or more 
        command APDUs by an electronic Health-Card (eHC).
      properties:
        type:
          type: string
          const: "StandardScenario"
          description: "The constant type identifier for StandardScenario."
        version:
          type: string
          const: "1.0.0"
          description: |
            Version of the scenario message.
            - version = "1.0.0": actual value of "version".
        clientSessionId:
          type: string
          description: |
            Session identifier for the scenario message.
            The value is taken from "StartMessage.clientSessionId".
        sequenceCounter:
          type: integer
          description: |
            An integer in range [0, 32767] preventing replay attacks within a
            sequence of "ConnectorScenarioMessage" i.e., a group of more than one
            "ConnectorScenarioMessage" where all included "StandardScenarioMessage"
            share the same "clientSessionId". The first "StandardScenarioMessage"
            in a sequence has "sequenceCounter=0".
            In the next "StandardScenarioMessage" the "sequenceCounter" is
            incremented by one.
        timeSpan:
          type: integer
          format: duration
          description: |
            An integer in range [0, 32767] indicating the time span in
            milliseconds for the PoPP-Service between receiving a
            "ScenarioResponseMessage" till the (expected) send time of the next
            "StandardScenarioMessage" or "ConnectorScenarioMessage".
            A Connector or client uses this information to detect a timeout.
            The special value "timeSpan=0" indicates that this is the last
            "StandardScenarioMessage" in a sequence.
        steps:
          type: array
          description: List of steps in the scenario.
          items:
            $ref: "#/components/schemas/ScenarioStep"
      required:
        - type
        - version
        - clientSessionId
        - sequenceCounter
        - timeSpan
        - steps

    ScenarioStep:
      type: object
      properties:
        commandApdu:
          type: string
          description: ISO/IEC 7816-4 command APDU as hexadecimal string.
        expectedStatusWords:
          type: array
          description: |
            List of expected status words in the corresponding response APDU
            as hexadecimal strings.
          items:
            type: string
      examples:
        - commandApdu: "00a4040c"
          expectedStatusWords: ["9000", "6f00"]
      required:
        - commandApdu
        - expectedStatusWords

    ConnectorScenarioMessage:
      type: object
      title: "Encapsulates a signed StandardScenarioMessage to be sent to a connector"
      description: |
        Sent by the server to the client to execute one or more
        command APDUs by an electronic Health-Card (eHC) via a connector.
        The scenarios are signed by the PoPP-Service using JWT according to
        RFC 7519 so that the connector can verify the integrity and authenticity
        of the message.

        1. PoPP-Service creates a `StandardScenarioMessage` as it would do in
        regular communication with an eHC (without a connector).
        2. PoPP-Service signs the `StandardScenarioMessage` using JWT. The
        JWT headers and claims are defined in `SignedScenarioHeaders` and
        `SignedScenarioClaims` schemas respectively.
        3. PoPP-Service encapsulates the signed `StandardScenarioMessage` in a
        `ConnectorScenarioMessage` and sends it to the client.
        4. The client receives the `ConnectorScenarioMessage`, retrieves the JWT
        containing the signed `StandardScenarioMessage` and forwards it to the connector.
        
        Sample `ConnectorScenarioMessage`:
        ```json
        {
          "type": "ConnectorScenario",
          "version": "1.0.0",
          "signedScenario": "eyAB.cdEF.ghIJ"
        }
        ```
        
        Sample content of the signed `StandardScenarioMessage` (header, claims, signature):
        ```json
        {
          "typ": "JWT"
          "alg": "ES256"
          "x5c": ["MII..."]
          "stpl": "MII..."
        }
        .
        {
          "message": {
            "type": "StandardScenario",
            "version": "1.0.0",
            "clientSessionId": "123e4567-e89b-12d3-a456-426614174000",
            "sequenceCounter": 1,
            "timeSpan": 1000,
            "steps": [
              {
                "commandApdu": "00a4040c",
                "expectedStatusWords": ["9000", "6f00"]
              }
            ]
          }
        }
        .
        signature
        ```
      properties:
        type:
          type: string
          const: "ConnectorScenario"
          description: "The constant type identifier for ConnectorScenario."
        version:
          type: string
          const: "1.0.0"
          description: |
            Version of the scenario message.
            - version = "1.0.0": actual value of "version".
        signedScenario:
          type: string
          description: |
            JWT according to RFC 7519 with a StandardScenarioMessage as payload.
            The payload is signed by the PoPP-Service.
      examples:
        - type: "ConnectorScenario"
          version: "1.0.0"
          signedScenario: "eeDDD.ddf.sd"
      required:
        - type
        - version
        - signedScenario

    SignedScenarioHeaders:
      type: object
      title: "Signed Scenario Headers"
      description: |
        The scenarios are signed by the PoPP-Service using JWT. This schema defines
        the headers of such JWTss
      properties:
        typ:
          type: string
          const: "JWT"
        alg:
          type: string
          description: |
            The algorithm used to sign the payload.
            Currently only ES256 is supported.
          enum:
            - ES256
        x5c:
          type: array
          items:
            type: string
            description: |
              End entity X.509 certificate with the signature verification key.
              Certificates are encoded in DER and base64 encoded as described in
              https://datatracker.ietf.org/doc/html/rfc7517#section-4.7
        stpl:
          type: string
          description: |
            This is a base64 encoded representation of the OCSP response to the
            end entity X.509 certificate in x5c.
      required:
        - typ
        - alg
        - x5c
        - stpl

    SignedScenarioClaims:
      type: object
      title: "Signed Scenario Claims"
      description: |
        The scenarios are signed by the PoPP-Service using JWT. This schema defines
        the claims of such JWTs.
      properties:
        message:
          - $ref: "#/components/schemas/StandardScenarioMessage"
      required:
        - message

    ScenarioResponseMessage:
      type: object
      title: "Bunch of response APDU received from an eHC"
      description: |
        Sent by a client to the server after the client received either a
        StandardScenarioMessage or a ConnectorScenarioMessage.
      properties:
        type:
          type: string
          const: "ScenarioResponse"
          description: "The constant type identifier for ScenarioResponse."
        steps:
          type: array
          description: |
            List of ISO/IEC 7816-4 response APDU as hexadecimal strings.
            The responses from the smartcard.
            The 1st element corresponds to the 1st command APDU from a Scenario.
            The n-th element corresponds to the n-th command APDU from a Scenario.
            The array is empty if and only if a Scenario does not contain any
            command APDU.
          items:
            type: string
            description: |
              Response from the smartcard encoded in hexadecimal characters
              [0-9a-f]. Contains at least 4 characters (status word).
      examples:
        - type: "ScenarioResponse"
          steps: ["9000", "abcd9000", "11223344559000", "6a81"]
      required:
        - type
        - steps

    ErrorMessage:
      type: object
      title: "Error"
      description: Sent by the server to indicate an error.
      properties:
        type:
          type: string
          const: "Error"
          description: "The constant type identifier for Error."
        errorCode:
          type: string
          description: "The error code."
        errorDetail:
          type: string
          description: "A human-readable error message."
      required:
        - type
        - errorCode

    TokenMessage:
      type: object
      title: "Token"
      description: Sent by the server to provide the client with a PoPP token.
      properties:
        type:
          type: string
          const: "Token"
          description: "The constant type identifier for Token."
        token:
          type: string
          description: "PoPP token as JWT compact serialization."
      required:
        - type
        - token

    # PoPP Token Headers
    TokenHeaders:
      type: object
      title: "PoPP Token Headers"
      description: | 
        Schema for the headers of a PoPP token as contained in the JWT.
      properties:
        typ:
          type: string
          const: "vnd.telematik.popp+jwt"
          description: The type of the token.
        alg:
          type: string
          description: | 
            The algorithm used to sign the token. Currently only ES256 is 
            supported.
          enum:
            - ES256
        kid:
          type: string
          description: |
            The key identifier of the key used to sign the token. 
            Key itself can be retrieved from the JWK endpoint of the PoPP
            server.
      required:
        - typ
        - alg
        - kid
      examples:
        - typ: "vnd.telematik.popp+jwt"
          alg: "ES256"
          kid: "x_vW4LVDipvu8iUQ5alKsZLWtH6jh4eJ4c5offXtMV0"

    # PoPP Token Claims
    TokenClaims:
      type: object
      title: "PoPP Token Claims"
      description: | 
        Schema for the claims of a PoPP token contained as payload in a JWT.
      properties:
        version:
          type: string
          const: "1.0.0"
          description: |
            The version of the PoPP token format.
            - version = "1.0.0": actual value of "version".
        iss:
          type: string
          description: |
            The issuer of the token. The value must be the URL of the
            PoPP server without the path and without a trailing slash.
        iat:
          type: integer
          description: |
            The time the token was issued, interpreted as described in
            https://datatracker.ietf.org/doc/html/rfc7519#section-4.1.6
        proofMethod:
          type: string
          description: |
            The proof method used.
            
            **healthid**:</br>
            "GesundheitsID via PoPP-Modul" i.e., health-ID provided by a
            special mobile app.
            
            **ehc-practitioner-...**:</br>
            Proof by eHC via a client, the client authenticates to the
            PoPP-service by means of an institution ID (i.e., SM-B).
            
            **ehc-provider-...**:</br>
            Proof by eHC via an arbitrary mobile app, the mobile app connects
            directly to the PoPP-service.
            
            **ehc-...-trustedchannel-read-x509**:</br>
            This is the preferred method of proof for an eHC G2.1, contact-based
            communication.
            The PoPP-service establishes a trusted channel to the eHC and uses
            that channel for (authentically) reading an X.509 certificate.

            **ehc-...-cvc-authenticated-database-hash**:</br>
            This is the only possibly proof method for an eHC G2.1, contactless
            communication.
            The PoPP-service authenticates the eHC and reads the X.509 certificate.
            Because reading the X.509 certificate here is non-authentic (from the
            PoPP-service point of view), the PoPP-service uses a database to check
            if the CV-certificate used for authenticating the eHC corresponds
            to the presented X.509 certificate.
            
            **ehc-...-user-x509**:</br>
            This is the preferred method of proof for an eHC G3.x, contactless
            or contact-based (no eHC PIN involved).
            The PoPP-service uses a challenge-response method where the private
            key corresponding to the X.509 certificate signs the challenge and
            that X.509 contains the information required for PoPP-token
            generation.

            **ehc-...-owner-x509**: (backlog, to-be-discussed)</br>
            Same as **ehc-...-user-x509** but another identity from the eHC is
            used where the user is requested to present a PIN.
            This way it is possible to distinguish between the owner of the eHC
            (card-holder) and a user of the eHC (deputy, agent, proxy).
          enum:
            - "healthid"
            - "ehc-practitioner-trustedchannel-read-x509"
            - "ehc-practitioner-cvc-authenticated-database-hash"
            - "ehc-practitioner-user-x509"
            - "ehc-practitioner-owner-x509"
            - "ehc-provider-trustedchannel-read-x509"
            - "ehc-provider-cvc-authenticated-database-hash"
            - "ehc-provider-user-x509"
            - "ehc-provider-owner-x509"
        patientProofTime:
          type: integer
          description: |
            The time the patient proof was performed, interpreted as described 
            in https://datatracker.ietf.org/doc/html/rfc7519#section-4.1.6
            
            * For proof methods with eHC this is the time the eHC was used.
            * For proof methods with eHealth-ID (GesundheitsID) this is the time
            the identity was verified using OpenID Connect.
        patientId:
          type: string
          description: |
            The patient identifier (KVNR).
        insurerId:
          type: string
          description: |
            The insurer identifier (IKNR).
        actorId:
          type: string
          description: |
            The actor identifier (Telematik-ID).
        actorProfessionOid:
          type: string
          description: |
            Profession OID of the actor.
      required:
        - version
        - iss
        - iat
        - proofMethod
        - patientProofTime
        - patientId
        - insurerId
        - actorId
        - actorProfessionOid
      examples:
        - version: "1.0.0"
          iss: "https://popp.example.com"
          iat: 1722593256
          proofMethod: "ehc-practitioner-trustedchannel-read-x509"
          patientProofTime: 1722593255
          patientId: "X123456789"
          insurerId: "123456789"
          actorId: "1-2012345678"
          actorProfessionOid: "1.2.276.0.76.4.50"

    TokenTanRequest:
      description: |
        The short TAN or long TAN is the result of mobile check-in.
        Authentication during mobile check-in is either based on
        eHealth-ID (GesundheitsID) or of an eHealth-Card.
      type: object
      properties:
        tan:
          description: short TAN or long TAN
          type: string
          examples: "123456"

  securitySchemes:
    oauth2Profiles:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://auth.example.com/auth
          tokenUrl: https://auth.example.com/token
          scopes:
            token:generate: Generate PoPP tokens


  responses:
    TokenResponse200:
      description: HttpStatus.OK (200)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TokenMessage'

    Error400BadRequest:
      description: HttpStatus.BAD_REQUEST (400)
      content:
        application/json:
          example:
            errorCode: malformedRequest
          schema:
            $ref: '#/components/schemas/ErrorMessage'

    Error403Forbidden:
      description: HttpStatus.FORBIDDEN (403)
      content:
        application/json:
          example:
            errorCode: invalAuth
          schema:
            $ref: '#/components/schemas/ErrorMessage'

    Error404NotFound:
      description: HttpStatus.NOT_FOUND (404)
      content:
        application/json:
          example:
            errorCode: noResource
          schema:
            $ref: '#/components/schemas/ErrorMessage'
    Error500InternalError:
      description:  HttpStatus.INTERNAL_SERVER_ERROR (500)
      content:
        application/json:
          example:
            errorCode: internalError
          schema:
            $ref: '#/components/schemas/ErrorMessage'
